C:\project\TalentHunt\backend\server.js 
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const AWS = require('aws-sdk');
const multer = require('multer');
const uuid = require('uuid').v4; // For generating unique file names
const emailTemplate = require('./config/emailTemplate'); // Import email template
const config = require('./config/config'); // Import configuration

const app = express();

// Use CORS middleware
app.use(cors(config.cors));

app.use(bodyParser.json());

// Configure AWS SDK
AWS.config.update({ region: config.aws.region });
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const s3 = new AWS.S3();
const ses = new AWS.SES();

// Configure multer for file uploads
const storage = multer.memoryStorage(); // Store files in memory
const upload = multer({ storage });

// Signup route
app.post('/api/signup-job-seeker', upload.single('resume'), async (req, res) => {
  const { firstName, lastName, phoneNumber, email, password } = req.body;
  const signupDate = new Date().toISOString();
  const hashedPassword = password; // Hash password if needed

  // Check if a file was uploaded
  if (!req.file) {
    return res.status(400).json({ error: 'Resume file is required' });
  }

  // Upload file to S3
  const fileName = `${uuid()}_${req.file.originalname}`;
  const s3Params = {
    Bucket: 'jobseeekerresumes', // Change to your S3 bucket name
    Key: fileName,
    Body: req.file.buffer,
    ContentType: req.file.mimetype,
  };

  try {
    const s3Data = await s3.upload(s3Params).promise();
    
    // Save user data to DynamoDB
    const params = {
      TableName: 'JobSeekersTable', // Change to your DynamoDB table name
      Item: {
        firstName,
        lastName,
        phoneNumber,
        email,
        password: hashedPassword,
        signupDate,
        resumeUrl: s3Data.Location, // Store the S3 file URL
      },
    };

    await dynamoDB.put(params).promise();

    // Send a welcome email
    const emailParams = {
      Destination: {
        ToAddresses: [email], // recipient email
      },
      Message: {
        Body: {
          Html: {
            Charset: 'UTF-8',
            Data: emailTemplate(firstName),
          },
        },
        Subject: {
          Charset: 'UTF-8',
          Data: config.aws.email.subject,
        },
      },
      Source: config.aws.email.source, // Use your verified email
    };

    await ses.sendEmail(emailParams).promise();

    res.status(201).json({ message: 'User created successfully and email sent!' });
  } catch (error) {
    console.error('Error during signup:', error);
    res.status(500).json({ error: 'Could not create user' });
  }
});

// Login route (unchanged)
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  const params = {
    TableName: 'JobSeekersTable',
    Key: {
      email,
    },
  };

  try {
    const result = await dynamoDB.get(params).promise();
    const user = result.Item;

    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const isPasswordValid = true; // Compare hashed passwords if implemented

    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    res.status(200).json({
      message: 'Login successful!',
      firstName: user.firstName,
      lastName: user.lastName,
    });
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ error: 'Could not log in' });
  }
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
C:\project\TalentHunt\frontend\src\App.js 
// src/App.js added
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import Header from './components/Header';
import Footer from './components/Footer';
import Home from './pages/Home'; // Update this later for the job search form
import Jobs from './pages/Jobs';
import JobDetails from './pages/JobDetails';
import Login from './pages/Login';
import Signup from './pages/Signup';
import Success from './pages/Success'; // Import the Success page
import { UserProvider, useUser } from './context/UserContext'; // Import UserProvider and useUser
import './App.css'; // Optional: For styling

function App() {
  return (
    <UserProvider>
      <Router>
        <HeaderContainer />
        <Routes>
          <Route path="/" element={<Home />} />  {/* Landing Page */}
          <Route path="/jobs" element={<MainLayout><Jobs /></MainLayout>} />
          <Route path="/jobs/:id" element={<MainLayout><JobDetails /></MainLayout>} />
          <Route path="/login" element={<MainLayout><Login /></MainLayout>} />
          <Route path="/signup-job-seeker" element={<MainLayout><Signup /></MainLayout>} />
          <Route path="/success" element={<MainLayout><Success /></MainLayout>} />
        </Routes>
        <Footer />
      </Router>
    </UserProvider>
  );
}

// Create a separate HeaderContainer to access user context
const HeaderContainer = () => {
  const { user, logout } = useUser(); // Get user and logout function from context
  return <Header user={user} onLogout={logout} />; // Pass user and onLogout to Header
};

// Main layout with left, center, and right sections
const MainLayout = ({ children }) => (
  <div className="layout">
    <div className="left">
      <h3>Job Categories</h3>
      <ul>
        <li><Link to="/jobs">IT Jobs</Link></li>
        <li><Link to="/jobs">Marketing Jobs</Link></li>
        <li><Link to="/jobs">Engineering Jobs</Link></li>
        <li><Link to="/jobs">Healthcare Jobs</Link></li>
      </ul>
    </div>
    <div className="center">
      {children}
    </div>
    <div className="right">
      <h3>Advertisements</h3>
      <p>Your ads or additional links can go here.</p>
    </div>
  </div>
);

export default App;
C:\project\TalentHunt\frontend\src\pages\Home.js 
// src/pages/Home.js
import React, { useState } from 'react';
import './Home.css'; // Optional: Create this for styling

const Home = () => {
  const [jobTitle, setJobTitle] = useState('');
  const [location, setLocation] = useState('');
  const [jobs, setJobs] = useState([]);
  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);

  const handleSearch = async () => {
    // Fetch jobs from your AWS DynamoDB here
    // Example: You would use fetch or axios to get data from your API endpoint
    const response = await fetch('/api/jobs?title=' + jobTitle + '&location=' + location);
    const data = await response.json();
    setJobs(data); // Assuming the data is an array of job objects
  };

  return (
    <div className="home">
      <h2>Job Search</h2>
      <div className="job-search-form">
        <input
          type="text"
          placeholder="Job Title / Skill"
          value={jobTitle}
          onChange={(e) => setJobTitle(e.target.value)}
        />
        <input
          type="text"
          placeholder="Location"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
        />
        <button onClick={handleSearch}>Search Jobs</button>
        <a href="#" onClick={() => setShowAdvancedSearch(!showAdvancedSearch)}>
          {showAdvancedSearch ? 'Hide Advanced Search' : 'Advanced Search'}
        </a>
      </div>
      {showAdvancedSearch && (
        <div className="advanced-search">
          {/* Add advanced search fields here */}
          <h3>Advanced Search</h3>
          {/* Example additional fields can be added */}
        </div>
      )}
      <div className="job-results">
        {jobs.map((job) => (
          <div className="job-card" key={job.id}>
            <h3>{job.title}</h3>
            <p><strong>Location:</strong> {job.location}</p>
            <p><strong>Summary:</strong> {job.summary}</p>
            <p><strong>Job ID:</strong> {job.id}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Home;
