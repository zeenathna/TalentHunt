C:\project\TalentHunt\frontend\src\pages\JobDetails.js 
import React, { useEffect, useState } from 'react'; 
import { useParams, useNavigate } from 'react-router-dom'; 
import axios from 'axios';
import './JobDetails.css'; 
import { useUser } from '../context/UserContext';  // Import user context

const JobDetails = () => {
  const { jobId } = useParams();
  const navigate = useNavigate();
  const { user, login } = useUser(); // Get user and login from context
  const [job, setJob] = useState(null);
  const [error, setError] = useState('');
  const [showModal, setShowModal] = useState(false); 
  const [loginError, setLoginError] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  // Fetch job details
  useEffect(() => {
    const fetchJobDetails = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/api/jobs/${jobId}`);
        setJob(response.data);
      } catch (err) {
        setError('Could not fetch job details');
      }
    };
    fetchJobDetails();
  }, [jobId]);

  // Function to store job application in the database
  const storeJobApplication = async () => {
    try {
      alert('in store',user);
      console.log('User state:', user); // Add this line in your JobDetails component to check the user state

      await axios.post('http://localhost:5000/api/jobs/apply', {
        jobId: job.jobId,
        jobTitle: job.title,
        email: user.email,
        dateapplied: new Date().toISOString(),
        emailsent: false
      });
      navigate('/confirmation', { state: { jobTitle: job.title, jobId: job.jobId } });
    } catch (err) {
      console.log(err);
      setError('Failed to apply for the job');
    }
  };

  // Apply button click handler
  const handleApplyClick = () => {
    if (user) {
      // If user is logged in, apply and navigate to confirmation page
      storeJobApplication();
    } else {
      // If not logged in, show the login modal
      setShowModal(true);
    }
  };

  // Handle login action
  const handleLogin = async () => {
    try {
      const response = await axios.post('http://localhost:5000/api/login', { email, password });
      if (response.status === 200) {
        login(response.data);  // Log the user in using context
        setShowModal(false);  // Close the login modal
        storeJobApplication();  // Proceed with job application
      }
    } catch (err) {
      setLoginError('Invalid credentials');
    }
  };

  // Close modal handler
  const closeModal = () => {
    setShowModal(false);
    setLoginError('');
  };

  // Error handling for fetching job details
  if (error) {
    return <div>{error}</div>;
  }

  if (!job) {
    return <div>Loading...</div>;
  }

  return (
    <div className="job-details">
      <button className="apply-button" onClick={handleApplyClick}>Apply</button> 

      <h1>{job.title}</h1>
      <div className="job-details-container">
        <p><strong>Job ID:</strong> {job.jobId}</p>
        <p><strong>Description:</strong> {job.description}</p>
        <p><strong>Location:</strong> {job.location}</p>
        <p><strong>Tech Skills:</strong> {job.techSkills}</p>
        <p><strong>Role:</strong> {job.role}</p>
        <p><strong>Education:</strong> {job.education}</p>
        <p><strong>Work Experience:</strong> {job.workexperience}</p>
        <p><strong>Work Mode:</strong> {job.workMode}</p>
        <p><strong>Part/Full Time:</strong> {job.partFullTime}</p>
        <p><strong>Sponsorship:</strong> {job.sponsership}</p>
        <p><strong>Visa Status:</strong> {job.visastatus}</p>
        <p><strong>Created Date:</strong> {new Date(job.createddate).toLocaleDateString()}</p>
        <p><strong>Contact ID:</strong> {job.contactid}</p>
      </div>

      {showModal && (
        <div className="modal">
          <div className="modal-content">
            <span className="close" onClick={closeModal}>&times;</span>
            <h2>Login to Apply</h2>
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            {loginError && <p className="error">{loginError}</p>}
            <div className="modal-buttons">
              <button onClick={handleLogin}>Login</button>
              <button onClick={closeModal}>Cancel</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default JobDetails;
C:\project\TalentHunt\backend\server.js 
require('dotenv').config(); // Load environment variables
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const AWS = require('aws-sdk');
const multer = require('multer');
const uuid = require('uuid').v4; // For generating unique file names
const emailTemplate = require('./config/emailTemplate'); // Import email template
const config = require('./config/config'); // Import configuration
const jwt = require('jsonwebtoken'); // Add this line to import jsonwebtoken

const app = express();

// Use CORS middleware
app.use(cors(config.cors));
app.use(bodyParser.json());

// Configure AWS SDK
AWS.config.update({ region: config.aws.region });
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const s3 = new AWS.S3();
const ses = new AWS.SES();

// Configure multer for file uploads
const storage = multer.memoryStorage(); // Store files in memory
const upload = multer({ storage });

// Signup route
app.post('/api/signup-job-seeker', upload.single('resume'), async (req, res) => {
  const { firstName, lastName, phoneNumber, email, password } = req.body;
  const signupDate = new Date().toISOString();
  const hashedPassword = password; // Hash password if needed

  // Check if a file was uploaded
  if (!req.file) {
    return res.status(400).json({ error: 'Resume file is required' });
  }

  // Upload file to S3
  const fileName = `${uuid()}_${req.file.originalname}`;
  const s3Params = {
    Bucket: 'jobseeekerresumes', // Change to your S3 bucket name
    Key: fileName,
    Body: req.file.buffer,
    ContentType: req.file.mimetype,
  };

  try {
    const s3Data = await s3.upload(s3Params).promise();
    
    // Save user data to DynamoDB
    const params = {
      TableName: 'JobSeekersTable', // Change to your DynamoDB table name
      Item: {
        firstName,
        lastName,
        phoneNumber,
        email,
        password: hashedPassword,
        signupDate,
        resumeUrl: s3Data.Location, // Store the S3 file URL
      },
    };

    await dynamoDB.put(params).promise();

    // Send a welcome email
    const emailParams = {
      Destination: {
        ToAddresses: [email], // recipient email
      },
      Message: {
        Body: {
          Html: {
            Charset: 'UTF-8',
            Data: emailTemplate(firstName),
          },
        },
        Subject: {
          Charset: 'UTF-8',
          Data: config.aws.email.subject,
        },
      },
      Source: config.aws.email.source, // Use your verified email
    };

    await ses.sendEmail(emailParams).promise();

    res.status(201).json({ message: 'User created successfully and email sent!' });
  } catch (error) {
    console.error('Error during signup:', error);
    res.status(500).json({ error: 'Could not create user' });
  }
});

// Login route
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  const params = {
    TableName: 'JobSeekersTable',
    Key: {
      email,
    },
  };

  try {
    const result = await dynamoDB.get(params).promise();
    const user = result.Item;

    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const isPasswordValid = true; // Compare hashed passwords if implemented

    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    // Generate JWT
    const token = jwt.sign(
      { email: user.email, firstName: user.firstName },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.status(200).json({
      message: 'Login successful!',
      token, // JWT
      email: user.email, // Ensure this is included in the response
      firstName: user.firstName,
      lastName: user.lastName,
    });
    
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ error: 'Could not log in' });
  }
});

// Get all jobs route
app.get('/api/jobs', async (req, res) => {
  const { title, location } = req.query;

  // Normalize inputs for case-insensitive matching
  const normalizedTitle = title ? title.toLowerCase() : '';
  const normalizedLocation = location ? location.toLowerCase() : '';

  // Define the parameters for the scan operation
  const params = {
    TableName: 'Jobs', // Replace with your DynamoDB table name
  };

  try {
    // Perform the scan operation
    const data = await dynamoDB.scan(params).promise();
    let jobs = data.Items; // Extract job data from Items

    // Post-scan filtering for substring match in techSkills and location
    jobs = jobs.filter(job => {
      const jobTechSkills = job.techSkills ? job.techSkills.toLowerCase() : '';
      const jobLocation = job.location ? job.location.toLowerCase() : '';

      const jobTechSkillsMatch = jobTechSkills.includes(normalizedTitle);
      const jobLocationMatch = jobLocation.includes(normalizedLocation);

      return (normalizedTitle === '' || jobTechSkillsMatch) &&
             (normalizedLocation === '' || jobLocationMatch);
    });

    res.status(200).json(jobs);
  } catch (error) {
    console.error('Error fetching jobs:', error);
    res.status(500).json({ error: 'Could not retrieve jobs' });
  }
});

// Get job details by Job ID
app.get('/api/jobs/:jobId', async (req, res) => {
  const { jobId } = req.params;

  const params = {
    TableName: 'Jobs', // Replace with your DynamoDB table name
    Key: {
      jobId, // Assuming jobId is the primary key in your DynamoDB table
    },
  };

  try {
    const result = await dynamoDB.get(params).promise();
    const job = result.Item;

    if (!job) {
      return res.status(404).json({ error: 'Job not found' });
    }

    res.status(200).json(job);
  } catch (error) {
    console.error('Error fetching job details:', error);
    res.status(500).json({ error: 'Could not retrieve job details' });
  }
});

// Apply for a job route
app.post('/api/jobs/apply', async (req, res) => {
  const { jobId, jobTitle, email } = req.body;
  const dateApplied = new Date().toISOString();
  const emailSent = false;

  if (!jobId || !jobTitle || !email) {
    return res.status(400).json({ error: 'Job ID, Job Title, and Email are required' });
  }

  console.log('Applying for job:', { jobId, jobTitle, email, dateApplied });

  const params = {
    TableName: 'JobsApplied',
    Item: {
      jobId,
      jobTitle,
      email,
      dateApplied,
      emailSent,
    },
  };

  try {
    await dynamoDB.put(params).promise();
    res.status(201).json({ message: 'Application submitted successfully' });
  } catch (error) {
    console.error('Error applying for job:', error);
    res.status(500).json({ error: 'Could not submit application' });
  }
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
C:\project\TalentHunt\frontend\src\App.js 
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import Header from './components/Header';
import Footer from './components/Footer';
import Home from './pages/Home';
import Jobs from './pages/Jobs';
import JobDetails from './pages/JobDetails';
import Login from './pages/Login';
import Signup from './pages/Signup';
import Success from './pages/Success'; 
import Confirmation from './pages/Confirmation'; // Import the new Confirmation component
import { UserProvider, useUser } from './context/UserContext';
import './App.css'; 

function App() {
  return (
    <UserProvider>
      <Router>
        <HeaderContainer /> {/* Encapsulate header with user context */}
        <Routes>
          <Route path="/" element={<Home />} /> {/* Landing Page */}
          <Route path="/jobs" element={<MainLayout><Jobs /></MainLayout>} />
          <Route path="/jobs/:jobId" element={<MainLayout><JobDetails /></MainLayout>} /> {/* Dynamic Job Details */}
          <Route path="/login" element={<MainLayout><Login /></MainLayout>} />
          <Route path="/signup-job-seeker" element={<MainLayout><Signup /></MainLayout>} />
          <Route path="/success" element={<MainLayout><Success /></MainLayout>} /> {/* Success page after sign-up */}
          <Route path="/confirmation" element={<MainLayout><Confirmation /></MainLayout>} /> {/* Add this line */}
        </Routes>
        <Footer /> {/* Static footer for all pages */}
      </Router>
    </UserProvider>
  );
}

// HeaderContainer to access and manage user state from context
const HeaderContainer = () => {
  const { user, logout } = useUser(); // Access user state and logout action from UserContext
  return <Header user={user} onLogout={logout} />; // Pass user state and logout function to Header
};

// Main layout that renders left sidebar, main content, and right section for advertisements
const MainLayout = ({ children }) => (
  <div className="layout">
    <div className="left">
      <h3>Job Categories</h3>
      <ul>
        <li><Link to="/jobs">IT Jobs</Link></li>
        <li><Link to="/jobs">Marketing Jobs</Link></li>
        <li><Link to="/jobs">Engineering Jobs</Link></li>
        <li><Link to="/jobs">Healthcare Jobs</Link></li>
      </ul>
    </div>
    <div className="center">
      {children} {/* Render main content based on the route */}
    </div>
    <div className="right">
      <h3>Advertisements</h3>
      <p>Your ads or additional links can go here.</p>
    </div>
  </div>
);

export default App;
C:\project\TalentHunt\frontend\src\pages\Home.js 
import React, { useState } from 'react'; 
import { Link } from 'react-router-dom'; // Import Link for navigation
import './Home.css'; // For optional custom styles

const Home = () => {
  const [jobTitle, setJobTitle] = useState('');
  const [location, setLocation] = useState('');
  const [jobs, setJobs] = useState([]); // Initialize jobs as an array

  const handleSearch = async () => {
    try {
      const response = await fetch(`http://localhost:5000/api/jobs?title=${jobTitle}&location=${location}`);
      const data = await response.json();

      // Ensure that data is an array before setting it
      if (Array.isArray(data)) {
        setJobs(data);
      } else {
        console.error('Expected an array but got:', data);
        setJobs([]); // Set an empty array in case of invalid data
      }
    } catch (error) {
      console.error('Error fetching jobs:', error);
      setJobs([]); // Set jobs to an empty array in case of error
    }
  };

  return (
    <div className="home">
      <h2>Job Search</h2>
      <div className="job-search-form">
        <input
          type="text"
          placeholder="Job Title / Skill"
          value={jobTitle}
          onChange={(e) => setJobTitle(e.target.value)}
        />
        <input
          type="text"
          placeholder="Location"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
        />
        <button onClick={handleSearch}>Search Jobs</button>
      </div>
      
      <div className="job-results">
        {jobs.length > 0 ? (
          jobs.map((job) => (
            <div className="job-card" key={job.jobId}>
              <p><strong>Job ID:</strong> <Link to={`/jobs/${job.jobId}`}>{job.jobId}</Link></p> {/* Job ID link */}
              <p><strong>Summary:</strong> {job.description}</p>
              <p><strong>Tech Skills:</strong> {job.techSkills}</p>
            </div>
          ))
        ) : (
          <p>No jobs found. Please try again.</p>
        )}
      </div>
    </div>
  );
};

export default Home;
C:\project\TalentHunt\frontend\src\context\UserContext.js 
